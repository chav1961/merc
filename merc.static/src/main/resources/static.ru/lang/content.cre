== {{/images/merlan_mini.png|}} Язык MerLan

MerLan - это не только вкусная рыба, это еще и язык программирования меркурианских роботов!
=== Синтаксис языка

Язык MerLan являетя строго типизованным компилируемым языком. Результат компиляции программы - байт-код виртуальной Java-машины (JVM). Программа состоит из:

* основного блока программы
* начиная с уровня 3 - дополнительных функций (описываются после основного блока)
* начиная с уровня 10 - дополнительных блоков (описываютс после основного блока)
==== Типы данных

Язык содержит ряд встроенных типов данных, в числе которых:

* целочисленный тип (описатель типа **int**, соответствует типу **long** языка Java)
* вещественный тип (описатель типа **real**, соответствует типу **double** языка Java)
* строковый тип (описатель типа **str**, соответствует типу **char[]** языка Java)
* булевский тип (описатель типа **bool**, соответствует типу **boolean** языка Java)
* тип "точка" (описатель типа **point**)
* тип "размер" (описатель типа **size**)
* тип "область" (описатель типа **area**)
* тип "трек" (описатель типа **track**)

Других встроенных типов данных в языке MerLan нет. Сам язык не имет явных средств порождения объектов, но может пользоваться полями и методами объектов игрового мира. Отличительная особенность - //изменяющаяся видимость// полей и объектов игрового мира, в зависимости от текущего уровня игрока. По этой причине при описании тех или иных полей и/или методов элементов игрового мира всегда будет указываться тот минимальный уровень игрока, с которого поле или метод становятся доступными для программного использования.

Константы соответствующих типов в языке MerLan имеют следующий вид:

* целочисленный: **0 -20 123456789012345678**
* вещественный: **0 -10.3 7.5e+10**
* строковый: **"test" ""**
* булевский: **true false**
* тип "точка": **point(-12,33) point(0,0)** (x, y)
* тип "размер": **size(20,15) size(0,0)**, (длина, ширина) отрицательные числа недопустимы
* тип "область": **area(20,15,3,5) area(point(12,3),size(2,2))**, (x, y, длина, ширина) отрицательные числа длины и ширины недопустимы
* тип "трек" : **track(point(10,20), area(point(3,5),size(2,2), track(point(-2,-3)), и.т.д)** список точек, областей и других треков (по сути дела, множество точек)

Над типами данных определены следующие операции:

* целочисленный:
** a + b, a - b, a * b, a / b (целочисленное деление), a % b (остаток от деления), -a (смена знака)
** a | b, a & b, a ^ b (побитовые "или", "и" и "исключающее или"), ~a (инверсия битов)
** a << n, a >> n, a >>>n (сдвиги содержимого)
** a++, a--, ++a, --a (инкремент и декремент содержимого)
** a < b, a <= b, a > b, a >= b, a == b (равенство), a != b (неравенство), a in n1, n2from..n2to, n3 (проверка попадания в список диапазонов)
* вещественный
** a + b, a - b, a * b, a / b (целочисленное деление), a % b (остаток от деления), -a (смена знака)
** a < b, a <= b, a > b, a >= b, a == b (равенство), a != b (неравенство), a in n1, n2from..n2to, n3 (проверка попадания в список диапазонов)
* строковый
** a # b (сцепление строк)
** a < b, a <= b, a > b, a >= b, a == b (равенство), a != b (неравенство), a in n1, n2from..n2to, n3 (проверка попадания в список диапазонов)
** a like b (регулярные выражения)
* булевский
** !a, a && b, a || b
* тип "точка"
** p.x, p.y (доступ к координатам точки)
** p in area(area), p in track(...) (проверка попадания в область или список точек)
* тип "область"
** a * b, a + b, a - b (пересечение, объединение, разность областей)
** a in area(...) (полное попадание одной области в другую)
** a in track(...) (полное попадание области в список точек)
* тип "размер"
** a < b, a <= b, a > b, a >= b, a == b (равенство), a != b (неравенство) сравнение площадей
* тип "трек"
** a * b, a + b, a - b (пересечение, объединение, разность треков, областей и точек)
** a in b (полное попадание трека в другой трек)
==== Описание переменных

Описание переменных задается в виде:

var <имя переменной> <тип> (<начальное значение>), ...;

* имя переменной - произвольное имя, состоящее из букв (в том числе русских), цифр и знака подчеркивания '_'
* тип - один из ранее перечисленных встроенных типов
* начальное значение - необязательный параметр, задающий начальное значение переменной. При его отстуствии круглые скобки не записываются

Имя переменной должно быть описано до того, как переменная будет исподьзована в программе. Помимо явно описанных переменных, в программе всегда присутствует ряд предопределенных переменных, описывать которые не нужно. Состав их следующий:
|=переменная |=Описание|
|**robo**| Универсальный робот |
|**world**| Переменная для доступа к игровому миру |
|**rt**| Переменная для доступа к среде выполнения MerLan |
|**teleport**| Переменная для доступа к функциональности здания телепорта |
|**market**| Переменная для доступа к функциональности супермаркета |
|**bank**| Переменная для доступа к функциональности банка |
==== Управляющие конструкции языка MerLan

Управляющие конструкции языка представляют собой традиционный для многих языков набор операторов. Операторы языка MerLan имеют свободный оформат и должны заверщаться символом **';'**. Состав управляющих конструкций следующий:





