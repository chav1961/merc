1. Дописать построение синтаксического дерева (в частности, обработку объявления типа)
2. Довести до ума JUnit-тест к парсеру лексем.


Типы данных языка

Язык содержит набор встроенных типов языка, а также дополнительные типы. Список встроенных типов:
- целочисленное (тип 'int'), при чтении соответствует типу long, при записи - LongKeeper
- вещественное (тип 'real'), при чтении соответствует типу double, при записи - DoubleKeeper
- строковое (типа 'str'), при чтении соответствует типу char[], при записи - StringKeeper
- булево (тип 'bool'), при чтении соответствует типу boolean, при записи - BooleanKeeper
- точка (тип 'point'), при чтении соответствует типу Point, при записи - PointKeeper
- размер (тип 'size'), при чтении соответствует типу Size, при записи - SizeKeeper
- область (тип 'area'), при чтении соответствует типу Area, при записи - AreaKeeper
- трасса (тип 'track'), при чтении соответствует типу Track, при записи - TrackKeeper

Остальные типы данных являются дополнительными и могут присутствовать или не присутствовать в данный конкретный момент времени.

Правила преобразования типов данных:

- для аддитивных и мультипликативных операций тип операции либо int, если все операнды этого типа, либо real в противном случае. Приведение типов выполняется автоматически
- для побитовых операций и операций сдвига тип операндов всегда int. Приведение типов выполняется автоматически
- для аддитивной арифметики, если первый операнд имеет тип str, то все остальные операнды приводятся к строковому типу автоматически
- для операций сравнения тип правого операнда всегда приводится к типу левого операнда
- для логических операций все типы операндв приводятся к bool
- для операций смены знака тип операнда должен быть либо int, либо real. Приведение типов выполняется автоматически
- в остальных случаях требуется явное приведение с помощью операций int(...), real(...), str(...), bool().
Приведение типов для остальных данных выполняется по следующей схеме
- point('int','int'), point('area') или point('доп_тип')
- size('int','int'), size('area') или size('доп_тип')
- area('int','int','int','int'), area('point','size') или area('доп_тип')
- track({'point'|'area'|'track'}...) или track('доп_тип')

Интерпретация операций для указанных типов данных:

- point '+' track --> track
- area '+' track --> track
- track '+' track --> track
- area '*' track --> track
- track '*' track --> track
- track '-' point --> track
- track '-' area --> track
- track '-' track --> track
- point 'in' area
- point 'in' track
- size {'<','<=','=','>','>=','!='} size  

Константами этих типов считаются:

- конструкции типа point('int','int'), size('int','int'), area('int','int','int','int') если аргументы являются константами
- конструкции типа point/size/area/track(teleport), point/size/area/track(landingpad), point/size/area(world), point/size/area(station)
- конструкции типа point('area'), size('area'), area('point','size'), если аргументы являются константами
- конструкция типа ({'point'|'area'|'track'}...), если все аргументы являются константами

Все эти типы имеют общедоступные поля и методы:
- point: x, y
- size: width, height
- area: x, y, width, height
- track: size, point('int')

Правила приведения по умолчанию:
- point --> area
- point --> track
- area --> track

Во всех остальных случаях требуется явное преобразование.